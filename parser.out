Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    WHITESPACE

Grammar

Rule 0     S' -> expression
Rule 1     expression -> VAR LBRACE expression RBRACE
Rule 2     expression -> variable_expression
Rule 3     expression -> variable_expression expression
Rule 4     variable_expression -> VAR ASSIGNMENT

Terminals, with rules where they appear

ASSIGNMENT           : 4
LBRACE               : 1
RBRACE               : 1
VAR                  : 1 4
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 3 0
variable_expression  : 2 3

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . VAR LBRACE expression RBRACE
    (2) expression -> . variable_expression
    (3) expression -> . variable_expression expression
    (4) variable_expression -> . VAR ASSIGNMENT

    VAR             shift and go to state 2

    expression                     shift and go to state 1
    variable_expression            shift and go to state 3

state 1

    (0) S' -> expression .



state 2

    (1) expression -> VAR . LBRACE expression RBRACE
    (4) variable_expression -> VAR . ASSIGNMENT

    LBRACE          shift and go to state 4
    ASSIGNMENT      shift and go to state 5


state 3

    (2) expression -> variable_expression .
    (3) expression -> variable_expression . expression
    (1) expression -> . VAR LBRACE expression RBRACE
    (2) expression -> . variable_expression
    (3) expression -> . variable_expression expression
    (4) variable_expression -> . VAR ASSIGNMENT

    $end            reduce using rule 2 (expression -> variable_expression .)
    RBRACE          reduce using rule 2 (expression -> variable_expression .)
    VAR             shift and go to state 2

    variable_expression            shift and go to state 3
    expression                     shift and go to state 6

state 4

    (1) expression -> VAR LBRACE . expression RBRACE
    (1) expression -> . VAR LBRACE expression RBRACE
    (2) expression -> . variable_expression
    (3) expression -> . variable_expression expression
    (4) variable_expression -> . VAR ASSIGNMENT

    VAR             shift and go to state 2

    expression                     shift and go to state 7
    variable_expression            shift and go to state 3

state 5

    (4) variable_expression -> VAR ASSIGNMENT .

    VAR             reduce using rule 4 (variable_expression -> VAR ASSIGNMENT .)
    $end            reduce using rule 4 (variable_expression -> VAR ASSIGNMENT .)
    RBRACE          reduce using rule 4 (variable_expression -> VAR ASSIGNMENT .)


state 6

    (3) expression -> variable_expression expression .

    $end            reduce using rule 3 (expression -> variable_expression expression .)
    RBRACE          reduce using rule 3 (expression -> variable_expression expression .)


state 7

    (1) expression -> VAR LBRACE expression . RBRACE

    RBRACE          shift and go to state 8


state 8

    (1) expression -> VAR LBRACE expression RBRACE .

    $end            reduce using rule 1 (expression -> VAR LBRACE expression RBRACE .)
    RBRACE          reduce using rule 1 (expression -> VAR LBRACE expression RBRACE .)

